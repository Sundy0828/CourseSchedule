// <auto-generated />
using System;
using CourseSchedule.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CourseSchedule.Core.Migrations
{
    [DbContext(typeof(CourseScheduleDBContext))]
    [Migration("20220926030002_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Combination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LogicalOperator")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("PK_Combinations");

                    b.ToTable("Combinations", (string)null);
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid?>("PrerequisiteCombinationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_Courses");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.CourseCombination", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CombinationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SubCombinationId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseId", "CombinationId")
                        .HasName("PK_CourseCombinations");

                    b.HasIndex("CombinationId");

                    b.ToTable("CourseCombinations", (string)null);
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.CourseDiscipline", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CourseId", "DisciplineId")
                        .HasName("PK_CourseDisciplines");

                    b.HasIndex("DisciplineId");

                    b.ToTable("CourseDisciplines", (string)null);
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.CourseSemester", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CourseId", "SemesterId")
                        .HasName("PK_CourseSemesters");

                    b.HasIndex("SemesterId");

                    b.ToTable("CourseSemesters", (string)null);
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.CourseYear", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("YearId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CourseId", "YearId")
                        .HasName("PK_CourseYears");

                    b.HasIndex("YearId");

                    b.ToTable("CourseYears", (string)null);
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Discipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsMajor")
                        .HasColumnType("boolean");

                    b.Property<string>("MajorCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id")
                        .HasName("PK_Disciplines");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Disciplines", (string)null);
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Institution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("PublicKey")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecretKey")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_Institutions");

                    b.ToTable("Institutions", (string)null);
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id")
                        .HasName("PK_Semesters");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Semesters", (string)null);
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Year", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id")
                        .HasName("PK_Years");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Years", (string)null);
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.CourseCombination", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Combination", "Combination")
                        .WithMany("CourseCombinations")
                        .HasForeignKey("CombinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseSchedule.Core.DBModel.Course", "Course")
                        .WithMany("CourseCombinations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combination");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.CourseDiscipline", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Course", "Course")
                        .WithMany("CourseDisciplines")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseSchedule.Core.DBModel.Discipline", "Discipline")
                        .WithMany("CourseDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.CourseSemester", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Course", "Course")
                        .WithMany("CourseSemesters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseSchedule.Core.DBModel.Semester", "Semester")
                        .WithMany("CourseSemesters")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.CourseYear", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Course", "Course")
                        .WithMany("CourseYears")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseSchedule.Core.DBModel.Year", "Year")
                        .WithMany("CourseYears")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Discipline", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Institution", "Institution")
                        .WithMany("Disciplines")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Semester", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Institution", "Institution")
                        .WithMany("Semesters")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Year", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Institution", "Institution")
                        .WithMany("Years")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Combination", b =>
                {
                    b.Navigation("CourseCombinations");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Course", b =>
                {
                    b.Navigation("CourseCombinations");

                    b.Navigation("CourseDisciplines");

                    b.Navigation("CourseSemesters");

                    b.Navigation("CourseYears");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Discipline", b =>
                {
                    b.Navigation("CourseDisciplines");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Institution", b =>
                {
                    b.Navigation("Disciplines");

                    b.Navigation("Semesters");

                    b.Navigation("Years");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Semester", b =>
                {
                    b.Navigation("CourseSemesters");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Year", b =>
                {
                    b.Navigation("CourseYears");
                });
#pragma warning restore 612, 618
        }
    }
}
