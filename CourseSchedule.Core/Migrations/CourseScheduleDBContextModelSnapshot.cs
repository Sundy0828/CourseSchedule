// <auto-generated />
using System;
using CourseSchedule.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CourseSchedule.Core.Migrations
{
    [DbContext(typeof(CourseScheduleDBContext))]
    partial class CourseScheduleDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CombinationCourse", b =>
                {
                    b.Property<Guid>("CombinationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uuid");

                    b.HasKey("CombinationsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CombinationCourse");
                });

            modelBuilder.Entity("CourseDiscipline", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplinesId")
                        .HasColumnType("uuid");

                    b.HasKey("CoursesId", "DisciplinesId");

                    b.HasIndex("DisciplinesId");

                    b.ToTable("CourseDiscipline");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Combination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LogicalOperator")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Combination");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Discipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsMajor")
                        .HasColumnType("boolean");

                    b.Property<string>("MajorCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("disciplines");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Institution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PublicKey")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecretKey")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("institutions");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Year", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Year");
                });

            modelBuilder.Entity("CourseSemester", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SemestersId")
                        .HasColumnType("uuid");

                    b.HasKey("CoursesId", "SemestersId");

                    b.HasIndex("SemestersId");

                    b.ToTable("CourseSemester");
                });

            modelBuilder.Entity("CourseYear", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("YearsId")
                        .HasColumnType("uuid");

                    b.HasKey("CoursesId", "YearsId");

                    b.HasIndex("YearsId");

                    b.ToTable("CourseYear");
                });

            modelBuilder.Entity("CombinationCourse", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Combination", null)
                        .WithMany()
                        .HasForeignKey("CombinationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseSchedule.Core.DBModel.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseDiscipline", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseSchedule.Core.DBModel.Discipline", null)
                        .WithMany()
                        .HasForeignKey("DisciplinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Discipline", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Institution", "Institution")
                        .WithMany("Disciplines")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Semester", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Institution", "Institution")
                        .WithMany("Semesters")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Year", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Institution", "Institution")
                        .WithMany("Years")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("CourseSemester", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseSchedule.Core.DBModel.Semester", null)
                        .WithMany()
                        .HasForeignKey("SemestersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseYear", b =>
                {
                    b.HasOne("CourseSchedule.Core.DBModel.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseSchedule.Core.DBModel.Year", null)
                        .WithMany()
                        .HasForeignKey("YearsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseSchedule.Core.DBModel.Institution", b =>
                {
                    b.Navigation("Disciplines");

                    b.Navigation("Semesters");

                    b.Navigation("Years");
                });
#pragma warning restore 612, 618
        }
    }
}
